// Pipelined Processor: IF -> ID -> EX -> WB
module pipeline_processor (
    input clk,
    input reset,
    output reg [7:0] result
);
    // Instruction set encoding
    parameter ADD = 2'b00;
    parameter SUB = 2'b01;
    parameter LOAD = 2'b10;

    // Pipeline registers
    reg [7:0] IF_ID_instr; // Instruction Fetch to Decode
    reg [7:0] ID_EX_A, ID_EX_B; 
    reg [1:0] ID_EX_op; 
    reg [7:0] EX_WB_result; 

    // Simple instruction memory (3 instructions)
    reg [7:0] instr_mem [0:2];  
    integer pc;

    // Register file
    reg [7:0] regfile [0:1]; 

    initial begin
        // Example instructions
        instr_mem[0] = {ADD, 6'd5}; // ADD 5 to reg0
        instr_mem[1] = {SUB, 6'd2}; // SUB 2 from reg0
        instr_mem[2] = {LOAD, 6'd9}; // LOAD 9 into reg0

        regfile[0] = 0; // Register 0
        regfile[1] = 0; // Register 1
        pc = 0;
        result = 0;
    end
// Pipeline Stages
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            pc <= 0;
            result <= 0;
        end else begin
            // IF Stage
            IF_ID_instr <= instr_mem[pc];
            pc <= (pc < 2) ? pc + 1 : 0;

            // ID Stage
            ID_EX_op <= IF_ID_instr[7:6];
            ID_EX_A <= regfile[0];
            ID_EX_B <= IF_ID_instr[5:0];

            // EX Stage
            case (ID_EX_op)
                ADD: EX_WB_result <= ID_EX_A + ID_EX_B;
                SUB: EX_WB_result <= ID_EX_A - ID_EX_B;
                LOAD: EX_WB_result <= ID_EX_B;
            endcase

            // WB Stage
            regfile[0] <= EX_WB_result;
            result <= regfile[0];
        end
    end
endmodule
